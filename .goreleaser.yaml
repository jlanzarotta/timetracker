# This is an example .goreleaser.yml file with some sensible defaults.
# Make sure to check the documentation at https://goreleaser.com

# The lines below are called `modelines`. See `:help modeline`
# Feel free to remove those if you don't want/need to use them.
# yaml-language-server: $schema=https://goreleaser.com/static/schema.json
# vim: set ts=2 sw=2 tw=0 fo=cnqoj

#version: 1

env_files:
  # GoReleaser requires an API token with the 'repo' scope selected to deploy
  # the artifacts to GitHub. You can create one here
  # https://github.com/settings/tokens/new.
  github_token: ./github_token

before:
  hooks:
    # You may remove this if you don't use go modules.
    - go mod tidy
    # you may remove this if you don't need go generate
    - go generate ./...

builds:
  - binary:
      timetracker
    env:
      - CGO_ENABLED=1
    goos:
      - windows
    goarch:
      - amd64
    ldflags:
      -s -w -X timetracker/cmd.BuildDateTime={{.Date}} -X timetracker/cmd.BuildVersion={{.Version}}

archives:
  - format: tar.gz
    # this name template makes the OS and Arch compatible with the results of `uname`.
    name_template: >-
      {{ .ProjectName }}_
      {{- title .Os }}_
      {{- if eq .Arch "amd64" }}x86_64
      {{- else if eq .Arch "386" }}i386
      {{- else }}{{ .Arch }}{{ end }}
      {{- if .Arm }}v{{ .Arm }}{{ end }}
    # use zip for windows archives
    format_overrides:
      - goos: windows
        format: zip

checksum:
  name_template: 'checksums.txt'

snapshot:
  name_template: '{{ .Tag }}-next'

changelog:
  use: github-native
  sort: asc

release:
  draft: true
  replace_existing_draft: true

scoops:
  - # Name of the recipe
    #
    # Default: ProjectName
    # Templates: allowed (since v1.19)
    name: timetracker

    # URL which is determined by the given Token (github or gitlab)
    #
    # Default:
    #   GitHub: 'https://github.com/<repo_owner>/<repo_name>/releases/download/{{ .Tag }}/{{ .ArtifactName }}'
    #   GitLab: 'https://gitlab.com/<repo_owner>/<repo_name>/-/releases/{{ .Tag }}/downloads/{{ .ArtifactName }}'
    #   Gitea: 'https://gitea.com/<repo_owner>/<repo_name>/releases/download/{{ .Tag }}/{{ .ArtifactName }}'
    # Templates: allowed
    url_template: "https://github.com/jlanzarotta/timetracker/releases/{{ .Tag }}/{{ .ArtifactName }}"

    # Directory inside the repository to put the scoop.
    #
    # Note that while scoop works if the manifests are in a directory,
    # 'scoop bucket list' will show 0 manifests if they are not in the root
    # directory.
    # In short, it's generally better to leave this empty.
    #directory: Scoops

    # Which format to use.
    #
    # Valid options are:
    # - 'msi':     msi installers (requires the MSI pipe configured, Pro only)
    # - 'archive': archives (only if format is zip),
    #
    # Default: 'archive'
    # Since: v1.24 (pro)
    use: archive

    # Git author used to commit to the repository.
    #commit_author:
    #  name: goreleaserbot
    #  email: bot@goreleaser.com

    # The project name and current git tag are used in the format string.
    #
    # Templates: allowed
    commit_msg_template: "Scoop update for {{ .ProjectName }} version {{ .Tag }}"

    # Your app's homepage.
    #
    # Templates: allowed (since v1.19)
    homepage: "https://github.com/jlanzarotta/timetracker"

    # Your app's description.
    #
    # Templates: allowed (since v1.19)
    description: "Simple time tracker written in Go."

    # Your app's license
    license: BSD-3-Clause

    # Setting this will prevent goreleaser to actually try to commit the updated
    # manifest leaving the responsibility of publishing it to the user.
    # If set to auto, the release will not be uploaded to the scoop bucket
    # in case there is an indicator for prerelease in the tag e.g. v1.0.0-rc1
    #
    # Templates: allowed (since v1.19)
    #skip_upload: true

    # Persist data between application updates
    #persist:
    #  - "data"
    #  - "config.toml"

    # An array of commands to be executed before an application is installed.
    #pre_install: ["Write-Host 'Running preinstall command'"]

    # An array of commands to be executed after an application is installed.
    #post_install: ["Write-Host 'Running postinstall command'"]

    # An array of dependencies.
    #
    # Since: v1.16
    #depends: ["git", "foo"]

    # A two-dimensional array of string, specifies the shortcut values to make available in the startmenu.
    # The array has to contain an executable/label pair. The third and fourth element are optional.
    #
    # Since: v1.17
    #shortcuts: [["drumroll.exe", "drumroll"]]

    # GOAMD64 to specify which amd64 version to use if there are multiple versions
    # from the build section.
    #
    # Default: 'v1'
    #goamd64: v3

    # Repository to push the generated files to.
    #repository:
    #  # Repository owner.
    #  #
    #  # Templates: allowed
    #  owner: caarlos0

    #  # Repository name.
    #  #
    #  # Templates: allowed
    #  name: my-repo

    #  # Optionally a branch can be provided.
    #  #
    #  # Default: default repository branch
    #  # Templates: allowed
    #  branch: main

    #  # Optionally a token can be provided, if it differs from the token
    #  # provided to GoReleaser
    #  # Templates: allowed
    #  token: "{{ .Env.GITHUB_PERSONAL_AUTH_TOKEN }}"

    #  # Sets up pull request creation instead of just pushing to the given branch.
    #  # Make sure the 'branch' property is different from base before enabling
    #  # it.
    #  #
    #  # Since: v1.17
    #  pull_request:
    #    # Whether to enable it or not.
    #    enabled: true

    #    # Whether to open the PR as a draft or not.
    #    #
    #    # Since: v1.19
    #    draft: true

    #    # If the pull request template has checkboxes, enabling this will
    #    # check all of them.
    #    #
    #    # This feature is only available in GoReleaser Pro.
    #    # Since: v1.20 (pro)
    #    check_boxes: true

    #    # Base can also be another repository, in which case the owner and name
    #    # above will be used as HEAD, allowing cross-repository pull requests.
    #    #
    #    # Since: v1.19
    #    base:
    #      owner: goreleaser
    #      name: my-repo
    #      branch: main

    #  # Clone, create the file, commit and push, to a regular Git repository.
    #  #
    #  # Notice that this will only have any effect if the given URL is not
    #  # empty.
    #  #
    #  # Since: v1.18
    #  git:
    #    # The Git URL to push.
    #    #
    #    # Templates: allowed
    #    url: 'ssh://git@myserver.com:repo.git'

    #    # The SSH private key that should be used to commit to the Git
    #    # repository.
    #    # This can either be a path or the key contents.
    #    #
    #    # IMPORTANT: the key must not be password-protected.
    #    #
    #    # WARNING: do not expose your private key in the configuration file!
    #    #
    #    # Templates: allowed
    #    private_key: '{{ .Env.PRIVATE_KEY_PATH }}'

    #    # The value to be passed to `GIT_SSH_COMMAND`.
    #    # This is mainly used to specify the SSH private key used to pull/push
    #    # to the Git URL.
    #    #
    #    # Default: 'ssh -i {{ .KeyPath }} -o StrictHostKeyChecking=accept-new -F /dev/null'
    #    # Templates: allowed
    #    ssh_command: 'ssh -i {{ .Env.KEY }} -o SomeOption=yes'
